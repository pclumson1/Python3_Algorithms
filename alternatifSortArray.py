
"""
Alternating sort
You are given an array of integers a. A new array b is generated by rearranging the elements of a in the following way:
b[0] is equal to a[0];
b[1] is equal to the last element of a;
b[2] is equal to a[1];
b[3] is equal to the second-last element of a;
b[4] is equal to a[2];
b[5] is equal to the third-last element of a;
and so on.
Here is how this process works:
Your task is to determine whether the new array b is sorted in strictly ascending order or not.
Example
For a = [1, 3, 5, 6, 4, 2], the output should be alternatingSort(a) = true.
The new array b will look like [1, 2, 3, 4, 5, 6], which is in strictly ascending order, so the answer is true.
For a = [1, 4, 5, 6, 3], the output should be alternatingSort(a) = false.
The new array b will look like [1, 3, 4, 6, 5], which is not in strictly ascending order, so the answer is false.
"""
a = [1, 3, 5, 6, 4, 2]
# a = [1, 4, 5, 6, 3]
# a = [-92, -23, 0, 45, 89, 96, 99, 95, 89, 41, -17, -48]
a = [-91, -84, -67, -44, 9, 70, 88, 37, -11, -67, -72, -87]
a = [-99, -29, -7, 17, 28, 71, 98, 86, 42, 22, 0, -29, -86]

# passing
from collections import deque


def alternatingSort(a):
    a = deque(a)
    if len(a) < 2:
        return True
    if a == []:
        return False
    # array to hold result
    b = []
    # sorted a without duplicates to check against result array to see if
    # result is sorted or not
    match = sorted(set(a))
    # while a still has numbers to sort into result array
    while len(a) > 0:
        # if there is an even number of items left
        if len(b) % 2 == 0:
            # remove first element and add to result
            b.append(a.popleft())
        # else if there is an odd number of items left
        else:
            # remove last element and add it to the result
            b.append(a.pop())
    # if result == the original array sorted then return True else return False
    if b == match:
        return True
    return False


# print(alternatingSort(a))
